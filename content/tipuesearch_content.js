var tipuesearch = {"pages": [{'title': 'home', 'text': 'week2-5 \n week6-9 \n', 'tags': '', 'url': 'home.html'}, {'title': 'weeks', 'text': 'week2-5 \n week6-9 \n', 'tags': '', 'url': 'weeks.html'}, {'title': 'week2-5', 'text': '1.git clone自己的cad2019倉儲 \n 2.git submoudle add  https://github.com/mdecourse/cmsimde.git \xa0cmsimde \n 3.python -m pip install flask_cors \n week3 \n Week5 \n slovespace \n \n', 'tags': '', 'url': 'week2-5.html'}, {'title': 'week6-9', 'text': 'week6 \n 畫自走車模型 \n \n v-rep模擬 \n 1.從下載下來的web_vrep2中app.py用編輯器開啟 \n 2.從下載下來的路徑V-REP3\\V-REP_PRO_EDU中找到vrep.exe \n 3.用v_rep中的file的open scene將下載下來的web_vrep2中two_wheeler.ttt打開 \n 4.剛剛編輯器開啟之app.py使用編輯器的tool中的go將其控制器開啟 \n 5.使用 localhost: 5000 將控制器開啟 \n 6.運用控制器的前後左右測試是否可以控制車子 \n 7.v-rep必須要將右上方開始鈕按下 \n \n v-rep加入start跟stop鍵 \n 1.將mde_course打開 \n 2.用編輯器開啟 templates 中的 controls.html \n 3.在第19行打上從下方向左按鈕指令複製來的指令並且將其改寫成start和stop \n 4.因為有start和stop兩個按鈕所以必須要放置兩行指令 \n 指令: <td><a class="pure-button pure-button-primary" href="/do/start">start</a></td><a class="pure-button pure-button-primary" href="/do/stop">stop</a></td> \n 5.結束後儲存並且用上方tool中的go測試是否已將按鈕放入 \n 6.用編輯器開啟 vrep_linefollower 定義其中開始和結束按鈕 \n 指令: if direction == \'start\': vrep.simxStartSimulation(self.clientID, vrep.simx_opmode_oneshot) elif direction == \'stop\': vrep.simxStopSimulation(self.clientID, vrep.simx_opmode_oneshot) else : \n 7.到課程網站中的老師倉儲中尋找issue \n 8.其中有一項issue為置入start和stop按鈕的指令 \n 9.複製並且依照影片中將其貼上 \n 10.在每行指令前定義好所需的指令例如:(if else elif) \n 11.打開 vrep.exe 並且用編輯器打開 app.py 並執行tool中的go \n 12.測試是否有成功運行 \n week7 \n solvespace編譯-更改help-about \n 1.開啟solvespace.cpp找到952行在solvespace後方加上compiled by 自己的學號 \n 2.刪除舊的這個路徑中201906_fall\\tmp\\solvespace\\build\\src\\CMakeFiles的solvespace.cpp.obj檔，此檔案若無刪除solvespace就只會讀取這個舊有的檔案 \n 3.進入solvespace資料夾中的這個資料夾用指令cd build \n 4.在黑窗中打上mingw32-make \n 5.開啟solvespace \n 6.在help中的about是否有compiled by 自己學號 \n slovespace繪圖驗證 \n about \n week8 \n \n 開啟網誌: \n (1)將leo edit開起來 \n (2)將config中的pelican.leo丟入leo edit裡面 \n (3)修改影片中有講的路徑中的siteurl更改成自己blog網址 \n (4)依照影片中的步驟將指令複製並在黑窗中執行 \n \n', 'tags': '', 'url': 'week6-9.html'}, {'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules \xa0 https://github.com/mdecourse/newcms.git \n week15~18 << \xa0 Previous \xa0 Next \xa0 >> Develop\n \n Copyright ©2019 All rights reserved | This template is made with \xa0 \xa0 by \xa0 Colorlib \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': '\n https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n \n About << \xa0 Previous \n \n \n Copyright ©2019 All rights reserved | This template is made with \xa0 \xa0 by \xa0 Colorlib \n \n \n', 'tags': '', 'url': 'Develop.html'}]};